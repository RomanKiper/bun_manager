from aiogram import Router, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from filters.chat_types import ChatTypeFilter
from keyboards.inline.inline_add_advert import inline_product_add_dell_kb
from filters.is_admin import IsAdminMsg

admin_router = Router()
admin_router.message.filter(ChatTypeFilter(['private']), IsAdminMsg())
admin_router.callback_query.filter(IsAdminMsg())

user_dict = {}


@admin_router.message(Command("admin"), F.text| F.command)
@admin_router.callback_query(lambda c: c.data.startswith("admin"))
async def admin_handler(message_or_callback: types.Union[types.Message, CallbackQuery]):
    if isinstance(message_or_callback, types.Message):
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = message_or_callback
        await message.answer(text="üëáüëá–î–æ–±–∞–≤—Ç–µ —Ç–æ–≤–∞—Äüëáüëá", reply_markup=inline_product_add_dell_kb)
    elif isinstance(message_or_callback, CallbackQuery):
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å
        callback_query = message_or_callback
        await callback_query.message.answer(text="üëáüëá–î–æ–±–∞–≤—Ç–µ —Ç–æ–≤–∞—Äüëáüëá", reply_markup=inline_product_add_dell_kb)


from aiogram import F, Router, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


@admin_router.message(F.text == "–Ø —Ç–∞–∫, –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—à–µ–ª")
async def starring_at_product(message: types.Message):
    await message.answer("–û–ö, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")


@admin_router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def change_product(message: types.Message):
    await message.answer("–û–ö, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")


@admin_router.message(F.text == "–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def delete_product(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä(—ã) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")


# –ö–æ–¥ –Ω–∏–∂–µ –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM)

class AddProduct(StatesGroup):
    # –®–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    name = State()
    description = State()
    price = State()
    image = State()

    texts = {
        'AddProduct:name': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:',
        'AddProduct:description': '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:',
        'AddProduct:price': '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω–æ–≤–æ:',
        'AddProduct:image': '–≠—Ç–æ—Ç —Å—Ç–µ–π—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π, –ø–æ—ç—Ç–æ–º—É...',
    }

@admin_router.callback_query(StateFilter(None), F.data == 'add_product')
# –°—Ç–∞–Ω–æ–≤–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ name

async def add_product(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    await callback.message.delete()
    await state.set_state(AddProduct.name)


# –•–µ–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã –∏ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ –∏–º–µ–Ω–Ω–æ —Ö–¥–µ—Å—å,
# –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å—Ç–∞–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–º–µ—Ä 1 (—ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–∞—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤)
@admin_router.message(StateFilter('*'), Command("–æ—Ç–º–µ–Ω–∞"))
@admin_router.message(StateFilter('*'), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=inline_product_add_dell_kb)


# –í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ (–Ω–∞ –ø—Ä–æ—à–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
@admin_router.message(StateFilter('*'), Command("–Ω–∞–∑–∞–¥"))
@admin_router.message(StateFilter('*'), F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def back_step_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()

    if current_state == AddProduct.name:
        await message.answer('–ü—Ä–µ–¥–∏–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        return

    previous = None
    for step in AddProduct.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(f"–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É \n {AddProduct.texts[previous.state]}")
            return
        previous = step


# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ name –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ description
@admin_router.message(AddProduct.name, F.text)
async def add_name(message: types.Message, state: FSMContext):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫–∞–∫—É—é –ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    # –∏ –≤—ã–π—Ç–∏ –∏–∑ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –Ω–µ –º–µ–Ω—è—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    # –Ω–∞–ø—Ä–∏–º–µ—Ä:
    if len(message.text) >= 100:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤. \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return

    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(AddProduct.description)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è name
@admin_router.message(AddProduct.name)
async def add_name2(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")


# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ description –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ price
@admin_router.message(AddProduct.description, F.text)
async def add_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(AddProduct.price)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è description
@admin_router.message(AddProduct.description)
async def add_description2(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")


# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ price –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ image
@admin_router.message(AddProduct.price, F.text)
async def add_price(message: types.Message, state: FSMContext):
    try:
        float(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã")
        return

    await state.update_data(price=message.text)
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(AddProduct.image)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è price
@admin_router.message(AddProduct.price)
async def add_price2(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞")


# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ image –∏ –ø–æ—Ç–æ–º –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@admin_router.message(AddProduct.image, F.photo)
async def add_image(message: types.Message, state: FSMContext):
    await state.update_data(image=message.photo[-1].file_id)
    await message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=inline_product_add_dell_kb)
    data = await state.get_data()
    await message.answer(str(data))
    await state.clear()



@admin_router.message(AddProduct.image)
async def add_image2(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–∏—â–∏")
